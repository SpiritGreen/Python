'''
Двоичное дерево писка состоит из узлов, где один узел содержит 3 поля:

Данные
Ссылка на левый потомок
Ссылка на правый потомок
Данная структура может быть представлена через словари, например, следующим образом:

t = {
    "key": 2,
    "left": {
        "key": 1
    },
    "right": {
        "key": 3
    }
}
Реализуйте процедуру поиска в двоичном дереве поиска, исходя из его основного свойства, что элементы слева должны быть меньше, а элементы справа — больше.

def find(tree, key)
Для приведённого выше примера find(t, 1) вернёт ссылку на узел

{'key': 1}
Если элемент не найден в дереве, то процедура должна возвращать None
'''

def find(tree, key):
   if key == tree['key']:
      return tree
   if key < tree['key']:
      if 'left' in tree:
        return find(tree['left'], key)
      else:
        return None
   else:
      if 'right' in tree:
        return find(tree['right'], key)
      else:
        return None

t = {
    "key": 2,
    "left": {
        "key": 1
    },
    "right": {
        "key": 3
    }
}
print(find(t, 2))